// -*- C++ -*- generated by wxGlade 0.6.3 on Fri Feb 25 18:55:11 2011

#include <wx/aboutdlg.h>

#include "BudgetFrame.h"
#include "Utilities.h"

// begin wxGlade: ::extracode

// end wxGlade


BudgetFrame::BudgetFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
    // begin wxGlade: BudgetFrame::BudgetFrame
    panel_1 = new wxPanel(this, wxID_ANY);
    menubar = new wxMenuBar();
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(wxID_NEW, wxEmptyString, wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_OPEN, wxT("&Open...\tCtrl+O"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(wxID_ANY, wxT("&Combine..."), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(wxID_SAVE, wxEmptyString, wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->Append(wxID_SAVEAS, wxT("Save &As...\tShift+Ctrl+S"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_1->AppendSeparator();
    wxglade_tmp_menu_1->Append(wxID_EXIT, wxEmptyString, wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_1, wxT("&Budget"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(wxID_UNDO, wxT("&Undo\tCtrl+Z"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_2->Append(wxID_REDO, wxT("&Redo\tCtrl+Y"), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_2, wxT("&Edit"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(wxID_ADD, wxT("&Add...\tCtrl+A"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(wxID_REMOVE, wxEmptyString, wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(wxID_ANY, wxT("Re&name...\tF2"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_3->AppendSeparator();
    wxglade_tmp_menu_3->Append(wxID_ANY, wxT("&View Transactions..."), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_3, wxT("&Category"));
    wxMenu* wxglade_tmp_menu_4 = new wxMenu();
    wxglade_tmp_menu_4->Append(wxID_ANY, wxT("&Example Budget"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_4->Append(wxID_HELP, wxT("&Tutorial...\tCtrl+H"), wxEmptyString, wxITEM_NORMAL);
    wxglade_tmp_menu_4->AppendSeparator();
    wxglade_tmp_menu_4->Append(wxID_ABOUT, wxT("&About..."), wxEmptyString, wxITEM_NORMAL);
    menubar->Append(wxglade_tmp_menu_4, wxT("&Help"));
    SetMenuBar(menubar);
    categoryList = new wxListCtrl(panel_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_SORT_ASCENDING|wxSUNKEN_BORDER);
    totalLabel = new wxStaticText(panel_1, wxID_ANY, wxT("Total: 0.00"));

    set_properties();
    do_layout();
    // end wxGlade

    // Initialize other variables
    _budget = NULL;

    // Setup the categories list
    categoryList->InsertColumn(0, wxT("Category"));
    categoryList->InsertColumn(1, wxT("Amount"), wxLIST_FORMAT_RIGHT);
    ResizeListColumns();

    // Add the window icon
    wxIconBundle icons;
    icons.AddIcon(wxIcon(wxT("icons/divvyup64x64.png"), wxBITMAP_TYPE_PNG));
    icons.AddIcon(wxIcon(wxT("icons/divvyup48x48.png"), wxBITMAP_TYPE_PNG));
    icons.AddIcon(wxIcon(wxT("icons/divvyup32x32.png"), wxBITMAP_TYPE_PNG));
    icons.AddIcon(wxIcon(wxT("icons/divvyup16x16.png"), wxBITMAP_TYPE_PNG));
    SetIcons(icons);

    // Load a new empty budget
    //LoadBudget(new Budget()); // TODO
    LoadBudget(new Budget("example", "example.dvy"));
}


BEGIN_EVENT_TABLE(BudgetFrame, wxFrame)
    // begin wxGlade: BudgetFrame::event_table
    EVT_MENU(wxID_NEW, BudgetFrame::OnNewPressed)
    EVT_MENU(wxID_OPEN, BudgetFrame::OnOpenPressed)
    EVT_MENU(wxID_ANY, BudgetFrame::OnCombinePressed)
    EVT_MENU(wxID_SAVE, BudgetFrame::OnSavePressed)
    EVT_MENU(wxID_SAVEAS, BudgetFrame::OnSaveAsPressed)
    EVT_MENU(wxID_EXIT, BudgetFrame::OnExitPressed)
    EVT_MENU(wxID_UNDO, BudgetFrame::OnUndoPressed)
    EVT_MENU(wxID_REDO, BudgetFrame::OnRedoPressed)
    EVT_MENU(wxID_ADD, BudgetFrame::OnAddPressed)
    EVT_MENU(wxID_REMOVE, BudgetFrame::OnRemovePressed)
    EVT_MENU(wxID_ANY, BudgetFrame::OnRenamePressed)
    EVT_MENU(wxID_ANY, BudgetFrame::OnViewPressed)
    EVT_MENU(wxID_ANY, BudgetFrame::OnExamplePressed)
    EVT_MENU(wxID_HELP, BudgetFrame::OnHelpPressed)
    EVT_MENU(wxID_ABOUT, BudgetFrame::OnAboutPressed)
    EVT_LIST_ITEM_DESELECTED(wxID_ANY, BudgetFrame::OnCategoryDeselected)
    EVT_LIST_ITEM_SELECTED(wxID_ANY, BudgetFrame::OnCategorySelected)
    EVT_LIST_ITEM_ACTIVATED(wxID_ANY, BudgetFrame::OnCategoryActivated)
    // end wxGlade
END_EVENT_TABLE();


void BudgetFrame::OnNewPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnNewPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnOpenPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnOpenPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnCombinePressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnCombinePressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnSavePressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnSavePressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnSaveAsPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnSaveAsPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnExitPressed(wxCommandEvent &event)
{
    // TODO: Add confirmation if the budget hasn't been saved
    Destroy();
}


void BudgetFrame::OnUndoPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnUndoPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnRedoPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnRedoPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnAddPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnAddPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnRemovePressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnRemovePressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnRenamePressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnRenamePressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnViewPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnViewPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnExamplePressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnExamplePressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnHelpPressed(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnHelpPressed) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnAboutPressed(wxCommandEvent &event)
{
    wxString description(wxT(
"A simple application that uses the\n\
envelope system to help you budget your money."
    ));

    wxString licenseSummary (wxT(
"This program is free software: you can redistribute it and/or modify\n\
it under the terms of the GNU General Public License as published by\n\
the Free Software Foundation, either version 3 of the License, or\n\
(at your option) any later version.\n\
\n\
This program is distributed in the hope that it will be useful,\n\
but WITHOUT ANY WARRANTY; without even the implied warranty of\n\
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\
GNU General Public License for more details.\n\
\n\
You should have received a copy of the GNU General Public License\n\
along with this program. If not, see <http://www.gnu.org/licenses/>."
    ));

    wxAboutDialogInfo info;
    info.SetIcon(wxIcon(wxT("icons/divvyup64x64.png"), wxBITMAP_TYPE_PNG));
    info.SetName(wxT("DivvyUp"));
    info.SetVersion(wxT("0.4"));
    info.SetDescription(description);
    info.SetCopyright(wxT("Copyright 2011 David Couzelis <drcouzelis@gmail.com>"));
    info.SetWebSite(wxT("http://sourceforge.net/projects/enbudget/"));
    info.SetLicense(licenseSummary);
    info.AddDeveloper(wxT("David Couzelis <drcouzelis@gmail.com>"));

    wxAboutBox(info);
}


void BudgetFrame::OnCategoryDeselected(wxListEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnCategoryDeselected) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnCategorySelected(wxListEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnCategorySelected) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void BudgetFrame::OnCategoryActivated(wxListEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (BudgetFrame::OnCategoryActivated) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


// wxGlade: add BudgetFrame event handlers


void BudgetFrame::set_properties()
{
    // begin wxGlade: BudgetFrame::set_properties
    SetTitle(wxT("DivvyUp"));
    SetSize(wxSize(300, 500));
    // end wxGlade
}


void BudgetFrame::do_layout()
{
    // begin wxGlade: BudgetFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    sizer_2->Add(categoryList, 1, wxEXPAND, 0);
    sizer_2->Add(totalLabel, 0, wxALL|wxALIGN_RIGHT, 5);
    panel_1->SetSizer(sizer_2);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


void BudgetFrame::LoadBudget(Budget* budget)
{
    delete _budget;

    _budget = new VersionControl(budget);
    UpdateBudget();
}


void BudgetFrame::UpdateBudget()
{
    UpdateTitle();
    UpdateCategoryList();
    //UpdateTotal();
    //UpdateCategoryControls();
    //UpdateUndoControls();
}


void BudgetFrame::UpdateTitle()
{
    wxString name(_budget->Document()->Name().c_str(), wxConvUTF8);

    if (name.empty()) {
        name = wxT("[new budget]");
    }

    wxString saved = wxT("");

    if (_budget->Document()->IsChanged()) {
        saved = wxT("*");
    }

    SetTitle(saved + name + wxT(" - DivvyUp"));
}


void BudgetFrame::UpdateCategoryList()
{
    // TODO: Store and restore the selected category

    // Clear the list
    categoryList->DeleteAllItems();

    // Add categories
    map<string, Category*>::const_iterator it;
    int index = 0;
    for (Budget::Iterator i = _budget->Document()->Begin(); i != _budget->Document()->End(); i++) {
        wxString category(i->second->Name().c_str(), wxConvUTF8);
        index = categoryList->InsertItem(index, category);
        wxString amount(FormatAmount(i->second->Total()).c_str(), wxConvUTF8);
        categoryList->SetItem(index, 1, amount);
        index++;
    }
}


void BudgetFrame::ResizeListColumns()
{
    int width = categoryList->GetClientSize().GetWidth();
    int w1 = (width / 3) * 2;

    if (w1 > 200) {
        w1 = 200;
    }

    int w2 = width - w1;

    categoryList->SetColumnWidth(0, w1);
    categoryList->SetColumnWidth(1, w2);
}

